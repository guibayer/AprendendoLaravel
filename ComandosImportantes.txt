Como ver todas as opções do php artisan?

#	php artisan

Para criar um projeto básico denominado projeto1:
#	composer create-project --prefer-dist laravel/laravel projeto1

Iniciar o servidor do laravel(Artisan) que vem nativamente instalado:
#	php artisan serve

Como ver todas as rotas que estão em funcionamento

# 	php artisan route:list

Como criar um novo controlador simples

#	php artisan make:controler

--> para incrementar usar flag --resource --> deixa a base do CRUD pronta --> utilizar
funcão resource em rotas que ele cria todas as rotas necessárias para o CRUD


********************************************************************

Para utilizar o bootstrap 5 no Laravel:

# npm install

Depois ir em resources->js-> app.js -> não vamos utilizar Vue(apagar a variável)

Comando para compilar:
#	npm run dev

Incluir no head:

#	<link href="{{asset('css/app.css')}}" rel="stylesheet">

Incluir no final do body:

#	<script src="{{asset('js/app.js')}}" type="text/javascript"></script>


Trabalhando com migrations:

-- CRIAR DATABASE COM O FORMATO ascii_general_ci

Configurar informações do arquivo .env

criar migrations

-- CRIAR DATABASE COM O FORMATO ascii_general_ci
**procurar criar tabelas com o nome no plural(final s normalmente)-> para futuramente ser mais fácil
modificar os dados presente nas tabelas

php artisan make:migration criar_tabela_produtos  (--create=produtos --> cria tabela produtos)

php artisan migrate --> executa todas as migrations criadas

Para retornar uma versão:

php artisan migrate:rollback

Criação de Seeders:

php artisan make:seeder  

para executar os seeders:

php artisan db:seed

Preparando o ambiente para o Eloquent(classe de modelos para comunicação do DB)

Comando para criar o primeiro modelo:

php artisan make:model Categoria(nome sempre no singular->laravel ira buscar a tabela CategoriaS) -m

Para administrar os dados dentro do laravel:

php artisan tinker

Ex: App\Categoria::all()
$cat = new App\Categoria()
$cat->nome = "nova categoria"
$cat->save()


Middlewares:
Presente em praticamente todas as aplicações
Fazem o intermédio da comunicação da aplicação
Reagir na chegada e resposta de uma requisição

Para criar toda a parte de autenticação(login):
php artisan make:auth


Parte de upload de arquivos:
Linka os arquivos que estão na pasta storage(local(por default, é possível q esse storage seja diferente
ex: externo(S3))))
php artisan storage:link

Lembrar que para salvar não se usa o input e fim o file

---------------------- Começando com AngularJS -------------------------------

npm install -g @angular/cli

Cria como qualquer outro projeto laravel
--> ele recomenda criar o projeto angular dentro da pasta: /PROJETO/resources/assets(no meu caso precisei criar ela)
Para criar a parte angular:
ng new (nomedoprojeto)

Após a criação do projeto deve entrar na pasta do app e compilar ele com o comando: ng serve

Também é necessário rodar o código para construir toda a parte de js externa: npm run build
Detalhe: Para consciliarmos o laravel com o angular precisamos setar o output do build para o diretório
público do laravel.
Para fazer isso vamos no arquivo package.json e alteramos a parte de scripts:
"build": "ng build" --> "build": "ng build --output-path=caminho"

Depois criar index.blade.php com a estrutura html e o app-root e scripts que estão no index.html
que o build do angular criou.

----------------------- Instalando Material Angular -------------------------------

npm install --save @angular/material @angular/cdk @angular/animations hammerjs @angular/flex-layout
	**flex-layout não faz parte do angular-material mas é um pacote interessante para trabalhar
	no desenvolvimento dos layouts
	
Depois ir no app do angular, src/app/app.module.ts e adicionar(é possível ver os imports na parte
getting-started do site do angular material):

import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import { MatButtonModule} from '@angular/material/button';

E na parte dentro de @ngModoule->imports:
    BrowserAnimationsModule,
    MatButtonModule,

Agora em /styles.css iremos importar o tema do angular:

@import "~@angular/material/prebuilt-themes/indigo-pink.css";


Para adicionar os icons do material devemos acrescentar no index.blade.php(disponível na página-> https://material.io/tools/icons/):
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

Substituir tudo que está em app.component.html por:
<mat-button>OK</mat-button>

Depois de ter feito esses passos executar o build:
npm run build